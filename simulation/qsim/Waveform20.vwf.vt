// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2024 17:32:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
// wires                                               
wire [31:0] a_mux_res;
wire [31:0] alu_Res_debug;
wire [31:0] alures;
wire [31:0] b_mux_res;
wire [7:0] br_pcc;
wire [31:0] data_write_debug;
wire [7:0] DEBUG_NEXTPC_C;
wire [1:0] fw_A;
wire [1:0] fw_b;
wire [31:0] inst_debug;
wire [7:0] pc_debugg;
wire [7:0] pc_four_debug;
wire pc_Sel_debu;
wire [8:0] ram_add;
wire [31:0] rd1_deb;
wire [31:0] rd2_deb;
wire rd_en_debug;
wire stop_debu;
wire [31:0] wbdata_deb;
wire wr_en_debug;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.a_mux_res(a_mux_res),
	.alu_Res_debug(alu_Res_debug),
	.alures(alures),
	.b_mux_res(b_mux_res),
	.br_pcc(br_pcc),
	.CLK(CLK),
	.data_write_debug(data_write_debug),
	.DEBUG_NEXTPC_C(DEBUG_NEXTPC_C),
	.fw_A(fw_A),
	.fw_b(fw_b),
	.inst_debug(inst_debug),
	.pc_debugg(pc_debugg),
	.pc_four_debug(pc_four_debug),
	.pc_Sel_debu(pc_Sel_debu),
	.ram_add(ram_add),
	.rd1_deb(rd1_deb),
	.rd2_deb(rd2_deb),
	.rd_en_debug(rd_en_debug),
	.RST(RST),
	.stop_debu(stop_debu),
	.wbdata_deb(wbdata_deb),
	.wr_en_debug(wr_en_debug)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #1000 1'b1;
	#1000;
end 

// RST
initial
begin
	RST = 1'b1;
end 
endmodule

